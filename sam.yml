AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: OSCON 2017 Serverless Tutorial Application

Resources:

  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title:
            Ref: AWS::StackName
        basePath: "/prod"
        schemes:
        - "https"
        paths:
          /events:
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - in: "body"
                name: "EventBodyModel"
                required: true
                schema:
                  $ref: "#/definitions/EventBodyModel"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              # NB: Must send 'Content-type: application/json' header for validation
              x-amazon-apigateway-request-validator: "ValidateBody"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${EventsIngestLambda.Arn}/invocations"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
          /locations:
            get:
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LocationsQueryLambda.Arn}/invocations"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /locations/{id}:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "id"
                in: "path"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LocationsQueryLambda.Arn}/invocations"
                httpMethod: "POST"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws_proxy"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"
          EventBodyModel:
            type: "object"
            properties:
              timestamp:
                type: "integer"
              locationId:
                type: "string"
              locationName:
                type: "string"
              latitude:
                type: "number"
              longitude:
                type: "number"
              city:
                type: "string"
              state:
                type: "string"
              temperature:
                type: "number"
            required:
            - timestamp
            - location_id
            - temperature
        x-amazon-apigateway-request-validators:
          ValidateBody:
            validateRequestParameters: false
            validateRequestBody: true

  EventsIngestLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: io.symphonia.EventsIngestLambda::handler
      Runtime: java8
      MemorySize: 256
      Timeout: 10
      CodeUri: events-ingest-lambda/target/events-ingest-lambda-1.0-SNAPSHOT.jar
      Policies:
        - AmazonSNSFullAccess
        - AWSXrayWriteOnlyAccess
      Environment:
        Variables:
          EVENTS_TOPIC: !Ref EventsTopic
      Events:
        ApiEvents:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /events
            Method: POST

  EventsTopic:
    Type: AWS::SNS::Topic

  LocationsPersistLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: io.symphonia.LocationsPersistLambda::handler
      Runtime: java8
      MemorySize: 256
      Timeout: 300
      CodeUri: locations-persist-lambda/target/locations-persist-lambda-1.0-SNAPSHOT.jar
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSXrayWriteOnlyAccess
      Environment:
        Variables:
          LOCATIONS_TABLE: !Ref LocationsTable
      Events:
        EventsTopicAction:
          Type: SNS
          Properties:
            Topic: !Ref EventsTopic

  LocationsQueryLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: io.symphonia.LocationsQueryLambda::handler
      Runtime: java8
      MemorySize: 256
      Timeout: 300
      CodeUri: locations-query-lambda/target/locations-query-lambda-1.0-SNAPSHOT.jar
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSXrayWriteOnlyAccess
      Environment:
        Variables:
          LOCATIONS_TABLE: !Ref LocationsTable
      Events:
        QueryLocation:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /locations
            Method: GET
        GetLocation:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /locations/{id}
            Method: GET

  LocationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "locationId"
          AttributeType: "S"
        - AttributeName: "state"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "locationId"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: "stateIndex"
          KeySchema:
            - AttributeName: "state"
              KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5

Outputs:
  ApiUrl:
    Description: URL of your API endpoint
    Value: !Join
      - ''
      - - https://
        - !Ref Api
        - '.execute-api.'
        - !Ref 'AWS::Region'
        - '.amazonaws.com/prod'
